---
  AWSTemplateFormatVersion: "2010-09-09"
  Description: "AutoSpotting: automated EC2 Spot market bidder integrated with AutoScaling"
  Parameters:
    AllowedInstanceTypes:
      Default: ""
      Description: >
        "Comma separated list of allowed instance types for spot, in case you
        may want to limit it to a smaller set of instance types  (also support
        globs). If unset, instances will be chosen by AutoSpotting's algorithm.
        Example: 'm4.xlarge,r4.xlarge,m5.*'"
      Type: "String"
    AutoSpottingLambdaARN:
      Description: "The ARN of the main AutoSpotting Lambda function - StackSetsOnly"
      Default: ""
      Type: "String"
    BiddingPolicy:
      AllowedValues:
        - "normal"
        - "aggressive"
      Default: "normal"
      Description: >
        "Policy choice for spot bid. If set to 'normal', we bid at the on-demand
        price. If set to 'aggressive', we bid at a multiple of the spot price."
      Type: "String"
    DisallowedInstanceTypes:
      Default: ""
      Description: >
        "Comma separated list of disallowed instance types for spot, in case you
        want to exclude specific types (also support globs). Example:
        't2.*,m4.large'"
      Type: "String"
    ExecutionFrequency:
      Default: "rate(5 minutes)"
      Description: >
        "Frequency of executing the Lambda function, influences the speed of
        replacing your instances. Can accept any value documented at
        http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"
      Type: "String"
    InstanceTerminationMethod:
      Default: "autoscaling"
      Description: >
        "Instance termination method.  Must be one of 'autoscaling' (default) or
        'detach' (compatibility mode, not recommended)"
      Type: "String"
    TerminationNotificationAction:
      AllowedValues:
        - "auto"
        - "detach"
        - "terminate"
      Default: "auto"
      Description: >
        "Action to do when receiving a Spot Instance Termination Notification.
        Must be one of 'auto' (terminate if lifecyclehook else detach) [default],
        'terminate' (lifecyclehook triggered), 'detach' (lifecyclehook not triggered)"
      Type: "String"
    FilterByTags:
      Default: ""
      Description: >
        "Comma separated list of tag=value on which to filter the ASGs that
        AutoSpotting considers.  By default (if no filters are specific) then
        'spot-enabled=true' is used.  Example:
        'spot-enabled=true,environment=dev'"
      Type: "String"
    LambdaFunctionTagKey:
      Description: "Name of the to be applied to the Lambda function"
      Default: "Name"
      Type: "String"
    LambdaFunctionTagValue:
      Description: "Value of the tag to be applied to the Lambda function"
      Default: "AutoSpotting"
      Type: "String"
    LambdaHandlerFunction:
      Default: "AutoSpotting"
      Description: "Handler function for Lambda"
      Type: "String"
    LambdaMemorySize:
      Default: "1024"
      Description: "Memory allocated to the Lambda function"
      Type: "Number"
    LambdaRegionalExecutionRoleARN:
      Description: "Execution Role ARN for Regional Lambda - StackSetsOnly"
      Default: ""
      Type: "String"
    LambdaS3Bucket:
      Default: "cloudprowess"
      Description: "S3 bucket that contains the function"
      Type: "String"
    LambdaS3BucketPrefix:
      Default: "nightly"
      Description: "S3 bucket prefix to use as source of lambdas and template"
      Type: "String"
    LambdaZipName:
      Default: "lambda.zip"
      Description: >
        "Name of Lambda function zip file inside the S3 bucket. Can be used
        to update to a more recent version, such as
        'lambda_build_57.zip'. Build numbers can be taken from TravisCI:
        https://travis-ci.org/AutoSpotting/AutoSpotting/builds"
      Type: "String"
    LogRetentionPeriod:
      Default: "7"
      Description: "Number of days to keep the Lambda function logs in CloudWatch."
      Type: "Number"
    MinOnDemandNumber:
      Default: "0"
      Description: >
        "Minimum on-demand instances (absolute number) to be kept in each of
        your groups. It is a global default value that can be overridden on a
        per-group basis using the autospotting_min_on_demand_number tag. It takes
        precedence over MinOnDemandPercentage, so it doesn't make sense to pass
        both of them."
      Type: "Number"
    MinOnDemandPercentage:
      Default: "0.0"
      Description: >
        "Minimum on-demand instances (percentage of the instances currently
        running in each group) that will be kept when replacing with spot
        instances. It is also a global default value that can be overridden on a
        per-group basis using the autospotting_min_on_demand_percentage tag.
        MinOnDemandNumber takes precedence if both these parameters are passed"
      Type: "Number"
    OnDemandPriceMultiplier:
      Default: "1.0"
      Description: >
        "Multiplier for the on-demand price. This is useful for volume discounts
        or if you want to set your bid price to be higher than the on demand
        price to reduce the chances that your spot instances will be
        terminated."
      Type: "Number"
    Regions:
      Default: ""
      Description: >
        "Space separated list of regions where it should run (supports globs),
        in case you may want to limit it to a smaller set of regions. If unset
        it will run against all available regions. Example: 'us-east-1 eu-*'"
      Type: "String"
    SpotPricePercentageBuffer:
      Default: "10.0"
      Description: >
        "Percentage Value of the bid above the current spot price. A spot bid
        would be placed at a value = current_spot_price * [1 +
        (spot_price_buffer_percentage/100.0)]. The main benefit is that it
        protects the group from running spot instances that got significantly
        more expensive than when they were initially launched, but still
        somewhat less than the on-demand price."
      Type: "Number"
    SpotProductDescription:
      AllowedValues:
        - "Linux/UNIX"
        - "SUSE Linux"
        - "Windows"
        - "Linux/UNIX (Amazon VPC)"
        - "SUSE Linux (Amazon VPC)"
        - "Windows (Amazon VPC)"
      Default: "Linux/UNIX (Amazon VPC)"
      Description: >
        "The Spot Product or operating system to use when looking up spot price
        history in the market. Valid choices: Linux/UNIX | SUSE Linux | Windows
        | Linux/UNIX (Amazon VPC) | SUSE Linux (Amazon VPC) | Windows (Amazon
        VPC)"
      Type: "String"
    StackSets:
      AllowedValues:
        - "False"
        - "True"
      Default: "False"
      Description: >
        "Deploy using CF Stacksets -
        https://github.com/AutoSpotting/AutoSpotting/STACKSETS.md"
      Type: "String"
    StackSetsMainRegion:
      Default: "us-east-1"
      Description: "Region of the Main Stack - StackSetsOnly"
      Type: "String"
    TagFilteringMode:
      AllowedValues:
        - "opt-in"
        - "opt-out"
      Default: "opt-in"
      Description: >
        "Controls the behavior against the AutoScaling groups tagged as per the
        FilterByTags option. Defaults to 'opt-in', only processing the tagged
        groups. The opposite behavior can be configured using the opt-out mode"
      Type: "String"
  Conditions:
    StackSetsFalse: !Equals
        - !Ref StackSets
        - "False"
    StackSetsTrue: !Equals
        - !Ref StackSets
        - "True"
    StackIsMain: !Or
        - !Condition StackSetsIsMain
        - !Condition StackSetsFalse
    StackSetsIsMain: !And
        - !Condition StackSetsTrue
        - !Equals
            - !Ref StackSetsMainRegion
            - !Ref AWS::Region
    StackSetsIsRegional: !And
        - !Condition StackSetsTrue
        - !Not
            - !Equals
                - !Ref StackSetsMainRegion
                - !Ref AWS::Region
  Outputs:
    AutoSpottingLambdaARN:
      Condition: "StackSetsIsMain"
      Value:
        Fn::GetAtt:
          - "LambdaFunction"
          - "Arn"
    LambdaRegionalExecutionRoleARN:
      Condition: "StackSetsIsMain"
      Value:
        Fn::GetAtt:
          - "LambdaRegionalExecutionRole"
          - "Arn"
  Resources:
    AutoSpotTeminationEventRule:
      Condition: "StackSetsTrue"
      Type: "AWS::Events::Rule"
      Properties:
        Description: "This rule is triggered 2 minutes before AWS terminates a spot instance"
        EventPattern:
          detail-type:
            - "EC2 Spot Instance Interruption Warning"
          source:
            - "aws.ec2"
        State: "ENABLED"
        Targets:
          -
            Id: "AutoSpottingTerminationEventGenerator"
            Arn: !If
              - "StackSetsIsRegional"
              - Fn::GetAtt:
                  - "TerminationEventRuleFunction"
                  - "Arn"
              - Fn::GetAtt:
                  - "LambdaFunction"
                  - "Arn"
    LambdaExecutionRole:
      Condition: "StackIsMain"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            -
              Action: "sts:AssumeRole"
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
        Path: "/lambda/"
      Type: "AWS::IAM::Role"
    LambdaRegionalStackExecutionRole:
      Condition: "StackSetsFalse"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            -
              Action: "sts:AssumeRole"
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
        Path: "/lambda/"
      Type: "AWS::IAM::Role"
    LambdaFunction:
      Condition: "StackIsMain"
      Properties:
        Code:
          S3Bucket:
            Ref: "LambdaS3Bucket"
          S3Key:
            Fn::Sub: "${LambdaS3BucketPrefix}/${LambdaZipName}"
        Description: "Implements SPOT instance automation"
        Environment:
          Variables:
            ALLOWED_INSTANCE_TYPES:
              Ref: "AllowedInstanceTypes"
            BIDDING_POLICY:
              Ref: "BiddingPolicy"
            DISALLOWED_INSTANCE_TYPES:
              Ref: "DisallowedInstanceTypes"
            INSTANCE_TERMINATION_METHOD:
              Ref: "InstanceTerminationMethod"
            MIN_ON_DEMAND_NUMBER:
              Ref: "MinOnDemandNumber"
            MIN_ON_DEMAND_PERCENTAGE:
              Ref: "MinOnDemandPercentage"
            ON_DEMAND_PRICE_MULTIPLIER:
              Ref: "OnDemandPriceMultiplier"
            REGIONS:
              Ref: "Regions"
            SPOT_PRICE_BUFFER_PERCENTAGE:
              Ref: "SpotPricePercentageBuffer"
            SPOT_PRODUCT_DESCRIPTION:
              Ref: "SpotProductDescription"
            TAG_FILTERING_MODE:
              Ref: "TagFilteringMode"
            TAG_FILTERS:
              Ref: "FilterByTags"
            TERMINATION_NOTIFICATION_ACTION:
              Ref: "TerminationNotificationAction"
        Handler:
          Ref: "LambdaHandlerFunction"
        MemorySize:
          Ref: "LambdaMemorySize"
        Role:
          Fn::GetAtt:
            - "LambdaExecutionRole"
            - "Arn"
        Runtime: "go1.x"
        Tags:
          -
            Key:
              Ref: "LambdaFunctionTagKey"
            Value:
              Ref: "LambdaFunctionTagValue"
        Timeout: "900"
      Type: "AWS::Lambda::Function"
    LambdaPermissionAutoSpotTeminationEventRule:
      Condition: "StackSetsTrue"
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !If
          - "StackSetsIsRegional"
          - Ref: "TerminationEventRuleFunction"
          - Ref: "LambdaFunction"
        Principal: "events.amazonaws.com"
        SourceArn:
          Fn::GetAtt:
            - "AutoSpotTeminationEventRule"
            - "Arn"
    LambdaPolicy:
      Condition: "StackIsMain"
      Properties:
        PolicyDocument:
          Statement:
            -
              Action:
                - "autoscaling:AttachInstances"
                - "autoscaling:DescribeAutoScalingGroups"
                - "autoscaling:DescribeAutoScalingInstances"
                - "autoscaling:DescribeLaunchConfigurations"
                - "autoscaling:DescribeTags"
                - "autoscaling:DetachInstances"
                - "autoscaling:TerminateInstanceInAutoScalingGroup"
                - "autoscaling:UpdateAutoScalingGroup"
                - "autoscaling:DescribeLifecycleHooks"
                - "cloudformation:Describe*"
                - "ec2:CreateTags"
                - "ec2:DeleteTags"
                - "ec2:DescribeInstanceAttribute"
                - "ec2:DescribeInstances"
                - "ec2:DescribeRegions"
                - "ec2:DescribeSpotPriceHistory"
                - "ec2:RunInstances"
                - "ec2:TerminateInstances"
                - "iam:CreateServiceLinkedRole"
                - "iam:PassRole"
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Effect: "Allow"
              Resource: "*"
        PolicyName: "LambdaPolicy"
        Roles:
          -
            Ref: "LambdaExecutionRole"
      Type: "AWS::IAM::Policy"
    # This allows the creation and deletion of the regional CloudFormation templates
    # and it used by the secondary Lambda function, backing the custom resource
    LambdaRegionalStackPolicy:
      Condition: "StackSetsFalse"
      Properties:
        PolicyDocument:
          Statement:
            -
              Action:
                - "ec2:DescribeRegions"
                - "cloudformation:CreateStack"
                - "cloudformation:DeleteStack"
                - "cloudformation:Describe*"
                - "events:PutRule"
                - "events:PutTargets"
                - "events:DeleteRule"
                - "events:DescribeRule"
                - "events:RemoveTargets"
                - "iam:PutRolePolicy"
                - "iam:DeleteRolePolicy"
                - "iam:CreateRole"
                - "iam:DeleteRole"
                - "iam:GetRole"
                - "iam:PassRole"
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                - "sns:CreateTopic"
                - "sns:DeleteTopic"
                - "sns:GetTopicAttributes"
                - "sns:SetTopicAttributes"
                - "sns:Subscribe"
                - "lambda:AddPermission"
                - "lambda:RemovePermission"
                - "lambda:CreateFunction"
                - "lambda:DeleteFunction"
                - "lambda:GetFunctionConfiguration"
              Effect: "Allow"
              Resource: "*"
        PolicyName: "LambdaRegionalStackPolicy"
        Roles:
          -
            Ref: "LambdaRegionalStackExecutionRole"
      Type: "AWS::IAM::Policy"
    LambdaRegionalExecutionRole:
      Condition: "StackIsMain"
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            -
              Action: "sts:AssumeRole"
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
        Path: "/lambda/"
      Type: "AWS::IAM::Role"
    LambdaRegionalPolicy:
      Condition: "StackIsMain"
      Properties:
        PolicyDocument:
          Statement:
            -
              Action:
                - "lambda:InvokeFunction"
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Effect: "Allow"
              Resource: "*"
        PolicyName: "LambdaPolicy"
        Roles:
          -
            Ref: "LambdaRegionalExecutionRole"
      Type: "AWS::IAM::Policy"
    LogGroup:
      Condition: "StackIsMain"
      Properties:
        LogGroupName:
          Fn::Join:
            - ""
            -
              - "/aws/lambda/"
              -
                Ref: "LambdaFunction"
        RetentionInDays:
          Ref: "LogRetentionPeriod"
      Type: "AWS::Logs::LogGroup"
    PermissionForEventsToInvokeLambda:
      Condition: "StackIsMain"
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName:
          Ref: "LambdaFunction"
        Principal: "events.amazonaws.com"
        SourceArn:
          Fn::GetAtt:
            - "ScheduledRule"
            - "Arn"
      Type: "AWS::Lambda::Permission"
    PermissionForInvokingTheLambdaFunctionFromOtherRegions:
      Condition: "StackIsMain"
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName:
          Ref: "LambdaFunction"
        Principal: "lambda.amazonaws.com"
        SourceAccount: !Ref 'AWS::AccountId'
      Type: "AWS::Lambda::Permission"
    ScheduledRule:
      Condition: "StackIsMain"
      Properties:
        Description: "ScheduledRule for launching the AutoSpotting Lambda function"
        ScheduleExpression:
          Ref: "ExecutionFrequency"
        State: "ENABLED"
        Targets:
          -
            Arn:
              Fn::GetAtt:
                - "LambdaFunction"
                - "Arn"
            Id: "AutoSpottingEventGenerator"
      Type: "AWS::Events::Rule"
    RegionalStackCreationLambdaFunction:
      Condition: "StackSetsFalse"
      Type: AWS::Lambda::Function
      DependsOn: LambdaRegionalStackPolicy
      Properties:
        Description: "Creates regional CloudFormation stacks that trigger the main Lambda function on spot instance termination notification"
        Handler: "regional_stack_lambda.handler"
        Runtime: "python3.6"
        Timeout: "900"
        Role:
          Fn::GetAtt:
            - "LambdaRegionalStackExecutionRole"
            - "Arn"
        Code:
          S3Bucket:
            Ref: "LambdaS3Bucket"
          S3Key:
            Fn::Sub: "${LambdaS3BucketPrefix}/regional_stack_lambda.zip"
    RegionalStackCustomResource:
      Condition: "StackSetsFalse"
      Type: "Custom::LambdaCallout"
      Properties:
        ServiceToken:
          Fn::GetAtt:
            - "RegionalStackCreationLambdaFunction"
            - "Arn"
        LambdaARN:
          Fn::GetAtt:
            - "LambdaFunction"
            - "Arn"
        LambdaRegionalExecutionRoleARN:
          Fn::GetAtt:
            - "LambdaRegionalExecutionRole"
            - "Arn"
        S3Bucket:
          Ref: "LambdaS3Bucket"
        S3BucketPrefix:
          Ref: "LambdaS3BucketPrefix"
      DependsOn: LambdaRegionalStackPolicy
    TerminationEventRuleFunction:
      Type: AWS::Lambda::Function
      Condition: "StackSetsIsRegional"
      Properties:
        Description: "Invokes the main AutoSpotting Lambda function on spot instance termination notification"
        Handler: "index.handler"
        Runtime: "python3.6"
        Timeout: "300"
        Environment:
          Variables:
            AUTOSPOTTING_LAMBDA_ARN:
              Ref: "AutoSpottingLambdaARN"
        Role:
          Ref: "LambdaRegionalExecutionRoleARN"
        Code:
          ZipFile: |
            from boto3 import client
            from json import dumps
            from os import environ
            from sys import exc_info
            from traceback import print_exc

            lambda_arn = (environ['AUTOSPOTTING_LAMBDA_ARN'])

            def parse_region_from_arn(arn):
                return arn.split(':')[3]

            def handler(event, context):
                snsEvent = {
                    'Records': [
                        {
                            'Event': 'aws:sns',
                            'EventSource': '1.0',
                            'EventSubscriptionArn': 'arn:aws:sns:' + event['region'] + ':FakeAccountId:FakeTopic',
                            'Sns': {
                                'Type': 'Notification',
                                'Message': dumps(event),
                            }
                        }
                    ]
                }
                try:
                    svc = client('lambda', region_name=parse_region_from_arn(lambda_arn))
                    response = svc.invoke(
                        FunctionName=lambda_arn,
                        LogType='Tail',
                        Payload=dumps(snsEvent),
                    )
                    print(response)
                except:
                    print_exc()
                    print("Unexpected error:", exc_info()[0])
